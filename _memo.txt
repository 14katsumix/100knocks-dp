#-------------------------------------------------------------------------------
# データサイエンス100本ノック（構造化データ加工編）
# https://github.com/The-Japan-DataScientist-Society/100knocks-preprocess

#-------------------------------------------------------------------------------

# github を2つのアカウントで運用する. 

14katsumix
@14katsumix
14katsumix@gmail.com
https://14katsumix.com/

[R+SQL] データサイエンス100本ノック＋αでスキルアップ - 公式編
[R+SQL] データサイエンス100本ノック＋αでスキルアップ - 発展編

[R+SQL] データサイエンス100本ノック＋α - 公式編
[R+SQL] データサイエンス100本ノック＋α - 発展編
[R+SQL] データサイエンス100本ノック＋α - 公式編 R-028
[R+SQL] データサイエンス100本ノック＋α - 発展編 A-001

# 公式編, 発展編
# 標準編, 発展編
# 標準編, ベース編, 基本編, ベーシック編, 練習編
# 応用編, アドバンス編, オリジナル編, 実践編, 挑戦編, チャレンジ編
# R初心者から中級者へ：100本ノック＋αでスキルアップ
# データサイエンス100本ノックから学ぶ実践テクニック

# SQLite には Date型やDatetime型が無い.

* テスト環境: 
cd /Users/kk/ds/
ここに 100knocks-dp (pub) を clone, pull して動作チェックする。

# /Users/kk/ds に 100knocks を clone する.

# sql-sqlite.R を DuckDBに対応させる -> sql-duckdb.R

# Hugo 導入
# Theme : PaperMod
# URL: slug にランダム文字列を設定 (UniqueID)
# Google Analytics, Google Search Console 導入
# コードブロック: カラー, ハイライト
# カスタムドメイン, https

# ソース公開向けGithubリポジトリ
# 14katsumix, 14jcjc (?)

# アフィリエイト: Amazon, Yahoo, 楽天、Google AdSense

# コーディング,リライト
# なるべくエレガントで拡張性の高いコード
# -> で代入する！
# duckdb を使用.
# receipt.sales_ymd を integer に変更する
# 変数と関数名をスネークケースにする
# 列名を修正する

* 書籍で使われていないメソッドなど

# all_of, any_of, one_of
# vars = c("customer_name", "postal_cd")
# across
# pick
# select の列名変更、一般化した順序
# .before, .after
# relocate
# reframe
# group_by(across(vars))
# {{ vars }}: 処理の共通化など
# %in% (+ subquery)
# if_all, if_any (filter)
# arrange : .by_group = T
# count(wt, sort) を使用する設問
# add_count
# tally
# summarise(across(starts_with("Sepal"), list(mean = mean, sd = sd)))
# complete.cases()
# slice_min
# slice_max は 042 のみ
# slice_head
# slice_sample
# dense_rank, ntile
# dense_rank, percent_rank
# pivot_longer, pivot_wider の複雑系
# 
# nesting()
# expand()
# expand.grid()
# 
# group_map
# update, insert, upsert
# RFM分析, # デシル分析, ABC分析

# count(wt, sort) を使用する設問
# 可読性の観点から考えると、count()の方が若干効率的かもしれません。
# count()はグループ化と集計を一度に行い、コードがシンプルで直感的です。
# tbl_receipt %>% 
#   summarise(sum = sum(amount), .by = c(store_cd, product_cd))
# tbl_receipt %>% 
#   count(store_cd, product_cd, wt = amount, name = "sum")


次のコードはもっとエレガントに書けない？

#-------------------------------------------------------------------------------
* githubのアカウントxxxとアカウントyyy でプログラムを開発してます。
commit や push をする度にアカウントを切り替える手間が発生しないように設定したい。

git remote add origin git@github.com:user/repo.git 
の意味?

https://qiita.com/hiroakin66/items/a1e8b36f697c5ae385cf

--
Gitのアカウントを切り替える手間を減らすためには、以下の方法で設定できます。

### 1. **SSHキーを使い分ける**
複数のGitHubアカウントを使っている場合、それぞれのアカウントに異なるSSHキーを設定し、`~/.ssh/config`で切り替える方法が有効です。

#### ステップ：
1. 各アカウント用にSSHキーを生成します。
   ```bash
   # アカウントxxx用
   ssh-keygen -t ed25519 -C "your_email_xxx@example.com" -f ~/.ssh/id_ed25519_github_xxx
   # アカウントyyy用
   ssh-keygen -t ed25519 -C "your_email_yyy@example.com" -f ~/.ssh/id_ed25519_github_yyy
   ```

2. SSH設定ファイル（`~/.ssh/config`）を編集して、リポジトリごとに使う鍵を指定します。
   ```bash
   # ~/.ssh/config
   Host github.com-xxx
     HostName github.com
     User git
     IdentityFile ~/.ssh/id_ed25519_github_xxx
     UseKeychain yes
     IdentitiesOnly yes
   
   Host github.com-xxx
     HostName github.com
     User git
     IdentityFile ~/.ssh/id_ed25519_github_yyy
     UseKeychain yes
     IdentitiesOnly yes
   ```

3. 各リポジトリのGit設定を変更します。
   ```bash
   # アカウントxxxのリポジトリで
   git remote set-url origin git@github.com-xxx:username/repo.git

   # アカウントyyyのリポジトリで
   git remote set-url origin git@github.com-yyy:username/repo.git
   ```

これで、各リポジトリに対して自動的に適切なSSHキーが使用されます。

### 2. **Gitのユーザー設定をリポジトリごとに変更**
Gitでは、リポジトリごとに異なるユーザー情報を設定することもできます。以下のコマンドを使って、リポジトリごとに異なるユーザー名とメールアドレスを設定できます。

```bash
# アカウントxxxのリポジトリで
cd cloned_project
git config --local user.name "gitのアカウント名xxx"
git config --local user.email "gitに登録しているメールアドレスxxx"
git config --local url."github.com-xxx".insteadOf "git@github.com"

# アカウントyyyのリポジトリで
cd cloned_project
git config --local user.name "gitのアカウント名yyy"
git config --local user.email "gitに登録しているメールアドレスyyy"
git config --local url."github.com-yyy".insteadOf "git@github.com"
```

これらの設定により、`commit` や `push` の際に、それぞれのアカウントの情報が反映されます。
このように、SSHキーやGitの設定を活用して、アカウントを切り替える手間を省くことができます。

#-------------------------------------------------------------------------------
* データサイエンス100本ノック (構造化データ加工編) などの書籍に掲載されてる設問を、ブログサイトに公開しても大丈夫？

1. 引用の範囲内で利用
著作権法上の「引用」の要件を満たせば、設問の一部をブログに掲載することが可能です。以下が引用の要件です：

公正な慣行に合致していること（目的や量が妥当である）。
引用部分が主従関係で「従」になっていること（引用がブログのメインではなく補足である）。
出典を明示すること（著者名・書籍名・出版社名など）。
例えば、問題文全体ではなく、キーワードや概要を簡単に記載し、その上で自分の解説や考察を中心にした内容を作ると良いでしょう。

2. 出版社や著者に確認を取る
設問を大部分そのまま利用したい場合や、問題文全体を引用したい場合は、出版社（技術評論社など）や著者に連絡して許可を得ることが推奨されます。許可を得ることで、問題なく利用できます。

3. オリジナルの表現に書き換える
設問の内容をそのまま記載せず、自分の言葉で問題の趣旨を説明し、独自の例や問題形式に書き換える方法もあります。この場合、元の設問が参考であることを明記し、リンクや書籍情報を提供することで、元の著作物への敬意を示せます。

4. 書籍のプロモーションを活用
書籍の概要や内容をブログで解説し、読者に「実際の問題を体験したい方はこの書籍を購入してください」と促す形で、アフィリエイトリンクを活用するのは効果的です。問題文を直接掲載せずとも、価値あるコンテンツを提供できます。

まとめ
そのまま設問を転載するのではなく、「引用」や「解説」をメインにした形で工夫するのが安全かつ有益です。もし具体的な例文や内容案が必要ならお手伝いします！

#...............................................................................
* データサイエンス100本ノック (構造化データ加工編)の全設問は github で無料公開されてるので、気にすることもない？

- 推奨されるブログ運営のアプローチ

問題文がGitHubで無料公開されているとしても、ブログ運営の際は次の方法が無難です：

リンクを活用： GitHubの該当リポジトリにリンクを貼り、「全設問は公式リポジトリから参照できます」と案内する。
自分の解説を中心に： 設問内容を参考にして、自分の言葉で解説を加えるか、手法や考え方のポイントをブログで紹介する。
独自の例題を作成： 書籍やGitHubの設問を参考に、類似するがオリジナルな設問を作成することで、独自性を高める。

#...............................................................................
* 下記のリポジトリREADMEに

https://github.com/The-Japan-DataScientist-Society/100knocks-preprocess

「大学、企業など組織でのご利用にあたっては、「データサイエンティスト協会スキル定義委員」の「データサイエンス100本ノック（構造化データ加工編）」を利用していることを明示いただければ自由に利用してOK」

という記載があります。個人の場合はどうなの？
--
GitHubリポジトリのREADMEに記載されている内容を見る限り、以下のように解釈できます。

---

### **1. 「組織での利用」についての記載**
リポジトリに書かれている「大学、企業など組織でのご利用」についての条件は、**「データサイエンス100本ノック（構造化データ加工編）」を利用していることを明示すれば自由に利用できる**、というものです。この記述は明確に**組織利用**を対象としていますが、**個人利用**については具体的に触れられていません。

---

### **2. 個人利用についての解釈**
個人利用に関する明示的な制限や条件がないため、以下のように考えるのが合理的です：

- 個人で利用する場合も、組織利用と同様に「出典を明示すれば自由に利用可能」と解釈するのが自然です。  
- 出典の明示方法としては、例えばブログに以下のような形で記載すれば問題ないと考えられます：  
  「この問題は、データサイエンティスト協会スキル定義委員による『データサイエンス100本ノック（構造化データ加工編）』を元にしています。」  
  または、リポジトリへのリンクを追加する。

ただし、**商用利用（例えばアフィリエイトブログ）については慎重に判断**した方が良いです。商用利用について明記されていない場合、トラブルを避けるために以下を確認すると安心です：
- リポジトリ管理者（著者や協会）にメールやGitHubのIssueを使って問い合わせる。
- 商用利用についての具体的な記載がない場合でも、出典を明示した上で利用し、内容の大部分を転載せず解説を中心にする。

---

### **3. 出典を明示する際のポイント**
- **書籍名とリポジトリ名**を必ず記載する。
- リンクもあわせて掲載することで、公式の意図に沿った利用になります。

例：  
「この記事では、データサイエンティスト協会スキル定義委員が提供している『データサイエンス100本ノック（構造化データ加工編）』の問題を参考にしています。詳細はGitHubリポジトリ（[こちら](https://github.com/The-Japan-DataScientist-Society/100knocks-preprocess)）をご覧ください。」

---

### **4. 個人利用と商用利用の線引き**
「自由に利用してOK」という記述がある場合でも、ブログでアフィリエイトリンクを掲載して収益化する場合、商用利用に該当すると判断される可能性があります。商用利用についてはREADMEで具体的に触れられていないため、念のため以下をおすすめします：
- GitHubのリポジトリ管理者に問い合わせて、アフィリエイトを含むブログでの利用について確認する。
- 問題文を直接転載せず、あくまで「解説」や「要約」「オリジナルな問題作成」を中心に構成する。

---

### **結論**
個人利用も自由に利用可能と解釈できますが、**出典の明示は必須**です。また、アフィリエイトブログなど商用利用に該当するケースでは、リポジトリ管理者に事前に確認を取るのが安全です。問題文をそのまま転載するのではなく、自分の解説や考察をメインにすることでトラブルを避けるとともに、よりオリジナルなコンテンツを提供できます。

#-------------------------------------------------------------------------------
* 現在、github を xxx というアカウント名で使ってますが、アカウント yyy を新たに作成しました。
今後は yyy を使いたいのですが、その移行手順は？

GitHubで新しいアカウント (`yyy`) を作成し、旧アカウント (`xxx`) から移行する場合、以下の手順を実施してください。  

* プライベートリポジトリの転送方法？

#-------------------------------------------------------------------------------

https://github.com/The-Japan-DataScientist-Society/100knocks-preprocess/

上記の一式をローカルにコピーしたい.

#-------------------------------------------------------------------------------

プライベートリポジトリを新しいアカウントに転送するには、少し追加の手順が必要ですが、GitHubが提供する「リポジトリ転送」機能を使えば簡単に移行できます。

以下に、具体的な方法を説明します。

---

### **1. 転送の前提条件**
- **新しいアカウント（`yyy`）がリポジトリにアクセスできること**  
  プライベートリポジトリの場合、転送するには新しいアカウントがそのリポジトリに「Owner」または「Admin」権限を持っている必要があります。

#### **権限を付与する方法（旧アカウントで作業）:**
1. `xxx` アカウントでGitHubにログイン。
2. 移行したいリポジトリのページを開く。
3. 上部メニューの「**Settings**」をクリック。
4. 左メニューから「**Collaborators and teams**」を選択。
5. 「**Manage access**」セクションで「Invite a collaborator」をクリック。
6. 新しいアカウントのGitHubユーザー名（`yyy`）を入力して招待。
7. 新しいアカウントで招待を承認。

---

### **2. プライベートリポジトリを転送する**
権限を付与したら、以下の手順で転送を実行します。

#### **手順: プライベートリポジトリの転送**
1. **旧アカウント（`xxx`）でGitHubにログイン**し、該当リポジトリを開きます。
2. **リポジトリ設定に移動**:
   - リポジトリのトップページで、右上の「**Settings**」をクリック。
3. **転送オプションを探す**:
   - 左サイドバーの「**General**」を選択。
   - ページ下部にスクロールして、「**Danger Zone**」セクションを見つけます。
   - 「**Transfer ownership**」をクリック。
4. **新しいアカウント（`yyy`）の名前を入力**:
   - 転送先ユーザー名（`yyy`）を入力し、確認を求められるリポジトリ名も入力します。
5. **転送の承認**:
   - GitHubが追加の確認（パスワード入力など）を求める場合があります。
   - 手順を完了すると、リポジトリが新しいアカウントに転送されます。

---

### **3. 転送後の設定**
リポジトリが新しいアカウントに移行された後、以下の作業を行います。

#### **(1) コラボレーターやチームの設定**
- 転送前に設定されていたコラボレーターの権限やチーム設定は転送されません。新しいアカウントで再設定が必要です。

#### **(2) ローカルリポジトリのリモートURLの変更**
転送によりリポジトリURLが変わるため、ローカル環境の設定を更新します。
```bash
git remote set-url origin https://github.com/yyy/<リポジトリ名>.git
```

#### **(3) 外部サービスとの連携更新**
- CI/CD（GitHub Actions, Jenkins など）の設定
- Webhooks
- APIキーやトークン

#### **(4) ドキュメントや通知の更新**
- READMEや関連ドキュメントでリポジトリURLを更新。
- プロジェクトメンバーや関係者に通知。

---

### **注意点**
- **リダイレクト**  
  転送後、旧アカウントのリポジトリURLにアクセスすると新しいアカウントにリダイレクトされます。ただし、これは永久的に保証されるわけではありません。
  
- **プライベートリポジトリの機密性**  
  転送中にリポジトリのアクセス設定が変更されないよう、移行中のアクセス権限を慎重に管理してください。

---

以上の手順でプライベートリポジトリを新しいアカウントに安全に移行できます。

#-------------------------------------------------------------------------------

---

### **移行全体の流れ**
1. **新しいアカウントの準備**
2. **リポジトリの移行**
3. **旧アカウントとの紐付けを解除**
4. **設定と通知の更新**
5. **テストと確認**

---

### **1. 新しいアカウントの準備**
- `yyy` アカウントが正常に動作することを確認します。
- `yyy` に関連付けたメールアドレスやSSHキーを設定します。

#### **SSHキーの設定**
新しいアカウント用にSSHキーを生成し、`yyy` に追加します。  
```bash
ssh-keygen -t ed25519 -C "your_email@example.com"
```
次に、GitHubの「Settings > SSH and GPG keys」に公開鍵を追加してください。

---

### **2. リポジトリの移行**
GitHubにはリポジトリの「転送機能」があります。リポジトリを新しいアカウントに移行する方法は以下の通りです。

#### **手順: リポジトリを転送する**
1. `xxx` アカウントでGitHubにログインします。
2. 移行したいリポジトリを開きます。
3. 右上の「Settings」をクリックします。
4. 左サイドバーの「General」を選択し、下にスクロールして「Transfer ownership」をクリックします。
5. 転送先のGitHubユーザー名として `yyy` を指定します。
6. 確認プロセスを完了するとリポジトリが `yyy` に移動します。

#### **注意点:**
- **リポジトリURLが変更されます**  
  例:  
  `https://github.com/xxx/<リポジトリ名>` → `https://github.com/yyy/<リポジトリ名>`  
  リポジトリを使用するユーザーに変更を通知してください。

- **コラボレーターの設定**  
  転送後、必要に応じて新しいアカウントでコラボレーターやチームの設定を再構成します。

---

### **3. 旧アカウントとの紐付けを解除**
#### **古いアカウント情報を削除または無効化**
以下を確認し、`xxx` アカウントとの紐付けを解除します：
- **外部サービスのAPIトークン**  
  (例: CI/CDツールやデプロイ設定)  
- **ローカルリポジトリのリモートURL**  
  ローカルでの設定を新しいリポジトリURLに変更します：
  ```bash
  git remote set-url origin https://github.com/yyy/<リポジトリ名>.git
  ```
- **Webhooksの更新**  
  旧アカウントに設定されたWebhookは新しいリポジトリに移行または再設定してください。

#### **旧アカウントの使用停止 (オプション)**
すべてのリポジトリが移行されたら、`xxx` アカウントを削除するか、ログイン情報を保存しておくだけにすることも可能です。

---

### **4. 設定と通知の更新**
新しいアカウントを使用するように設定を変更します。
- **プロフィールやREADMEファイルの修正**  
  古いアカウント名が記載されている箇所を新しいものに更新します。

- **リンクの通知**  
  プロジェクトのユーザーやコラボレーターに、リポジトリの新しいURLを伝えます。

---

### **5. テストと確認**
- ローカル環境から `git pull` や `git push` が新しいアカウントで動作するかテストします。
- 新しいリポジトリでCI/CDやデプロイが正しく動作することを確認します。

---

### **その他の注意点**
- **スターやフォロワーの引き継ぎ**  
  リポジトリのスターやフォロワーは引き継がれますが、アカウント自体のフォロワーは引き継がれません。
- **プライベートリポジトリの転送**  
  プライベートリポジトリの場合、転送には新しいアカウントがそのリポジトリにアクセスできる権限が必要です。

---

これでスムーズに移行できるはずです！質問があればお気軽にどうぞ 😊


#-------------------------------------------------------------------------------
* github を xxx というアカウント名で使ってますが、アカウントを yyy に移行する手順は？

GitHubのアカウント名を変更する手順を以下に説明します。  
※アカウント名を変更しても、リポジトリやフォロワーなどはそのまま引き継がれますが、URLが変更されるため、注意が必要です。

---

### **手順: GitHubアカウント名を変更する**
1. **GitHubにログインする**  
   現在のアカウント (`xxx`) でGitHubにログインしてください。

2. **設定ページに移動する**  
   - 右上のプロフィール写真をクリックして、ドロップダウンメニューから「**Settings**」を選択します。

3. **アカウント名の変更ページにアクセス**  
   - 左サイドバーの「**Profile**」を選択します。
   - 「**Username**」の項目を探し、「**Edit**」ボタンをクリックします。

4. **新しいアカウント名を入力する**  
   - 新しいアカウント名 (`yyy`) を入力します。
   - 使用可能な名前かどうかを確認するためのチェックが自動で行われます。

5. **確認して変更を保存**  
   - 使用可能であれば、「**Change Username**」をクリックして保存します。

6. **変更後の作業**  
   アカウント名を変更すると、以下の作業を行う必要がある場合があります：
   - **リポジトリのリモートURLの更新**  
     ローカルリポジトリを使用している場合、`git remote` コマンドを使用して新しいURLを設定する必要があります。
     ```bash
     git remote set-url origin https://github.com/yyy/<リポジトリ名>.git
     ```
   - **リンクの修正**  
     他の場所で使用している古いアカウント名 (`xxx`) に基づいたリンク（READMEや外部サイトのURLなど）を、新しいアカウント名 (`yyy`) に基づいたリンクに修正します。

7. **通知の確認**  
   アカウント名変更後、GitHubは自動的にリダイレクトを設定しますが、古いURLを参照しているユーザーに通知することをおすすめします。

---

### 注意点
- **リダイレクトについて**  
  GitHubは旧アカウント名から新アカウント名へのリダイレクトを提供しますが、永続的に保証されているわけではありません。
- **名前の一意性**  
  GitHubのアカウント名は一意でなければならないため、新しい名前が他のユーザーに使用されていないことが必要です。

以上の手順でアカウント名を問題なく変更できるはずです！

#...............................................................................
GitHubのアカウント名を変更すると、一部の設定ファイルやシステム設定を手動で編集する必要が出てくる場合があります。以下は、編集が必要になる可能性がある主なケースです。

---

### **1. ローカルリポジトリのリモートURL**
アカウント名を変更すると、GitHub上のリポジトリURLも変わるため、ローカルにクローンしているリポジトリのリモートURLを更新する必要があります。

#### **修正方法:**
リモートURLを新しいアカウント名に変更します。
```bash
git remote set-url origin https://github.com/yyy/<リポジトリ名>.git
```
確認する場合:
```bash
git remote -v
```

---

### **2. CI/CDやデプロイの設定ファイル**
GitHub ActionsやJenkinsなどのCI/CDツール、またはサーバーへのデプロイ設定で古いリポジトリURLやアカウント名がハードコードされている場合、それを修正する必要があります。

#### **対象のファイル例:**
- `.github/workflows/*.yml`
- `Dockerfile` や `docker-compose.yml`
- その他のスクリプトファイル

---

### **3. 外部サービスとの連携設定**
GitHubアカウントを使用して連携している外部サービスで、アカウント名やリポジトリURLを明示的に設定している場合、変更が必要です。

#### **例:**
- CIサービス (CircleCI, TravisCI など)
- Webhooks
- サードパーティのプラグインやAPI連携

---

### **4. ドキュメントやREADMEファイル**
プロジェクトのREADMEやドキュメントに古いリポジトリURLを記載している場合、それらも手動で更新する必要があります。

#### **修正例:**
```markdown
# Before
https://github.com/xxx/<リポジトリ名>

# After
https://github.com/yyy/<リポジトリ名>
```

---

### **5. SSHキー設定**
アカウント名を変更してもSSHキー自体は有効のままですが、設定に問題がないか確認することをおすすめします。

#### **確認コマンド:**
```bash
ssh -T git@github.com
```

---

### **6. APIトークンやクライアントアプリ**
GitHubのAPIトークンや、ローカルのクライアントアプリ (例えば SourceTree、GitKrakenなど) を使用している場合、アカウント名変更に伴う設定変更が必要になる可能性があります。

---

### **まとめ**
以下の場合に設定ファイルの編集が必要です：
- リモートURLに旧アカウント名が含まれている場合
- CI/CDや外部サービスで旧アカウント名が使われている場合
- ドキュメントやREADMEに旧URLが記載されている場合

**チェックリストを作成**し、関連ファイルや設定をすべて確認することをおすすめします。これで移行後のトラブルを最小限に抑えることができます！

#-------------------------------------------------------------------------------

githubで

ローカルリポジトリ: 
/home/100knocks-dp

リモートリポジトリ: 
100knocks-dp-dev: 開発用 (Private)
100knocks-dp: ブログ公開用 (Public)

という環境で、
100knocks-dp にはローカルリポジトリの一部のファイルのみをpushして公開したいです。
どのように git を管理すればよい？

以下のローカルリポジトリをクリーンしたい.

origin git@github.com:14katsumix/100knocks-dp.git

#-------------------------------------------------------------------------------

