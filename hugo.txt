#-------------------------------------------------------------------------------
# To install the exended edition of Hugo:
brew install hugo
hugo version

# Create a new  site
cd /Users/kk/Home/_work/blog
hugo new site tech-blog --format yaml

# Installing/Updating PaperMod
cd /Users/kk/Home/_work/blog/tech-blog
git init
git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
git submodule update --init --recursive
# needed when you reclone your repo (submodules may not get cloned automatically)
git submodule update --remote --merge

# hugo.yaml の編集: 
https://adityatelange.github.io/hugo-PaperMod/posts/papermod/papermod-installation/
の内容を参考に.

baseURL: "https://14katsumix.github.io/tech-blog/"
languageCode: jp
title: katsuのブログ
paginate: 5
theme: PaperMod

* サンプル記事を作成
hugo new content/100k/r-030.md

* 出力先ディレクトリ（public/）をクリアして再ビルド
hugo --cleanDestinationDir

# public/ディレクトリを一度削除して再ビルド
rm -rf public/
hugo

* ローカル環境でサイトを確認

hugo server
# to include draft content
hugo server -D
# 最後に修正したページにブラウザから自動的にリダイレクトさせたい場合
hugo server --navigateToChanged
# キャッシュをクリア
hugo server --ignoreCache
# Fast Render（高速レンダリング）を無効化する場合
hugo server --disableFastRender

hugo server --ignoreCache --disableFastRender --cleanDestinationDir --navigateToChanged -D

hugo server --ignoreCache --disableFastRender --cleanDestinationDir --navigateToChanged --environment production -D

# 以下にアクセスしてサイトを確認する
http://localhost:1313/tech-blog/

# 別ポートを使用する場合
hugo server --port 1314

tech-blog/.gitignore を作成する。以下からダウンロード:
https://github.com/adityatelange/hugo-PaperMod/blob/exampleSite/.gitignore

* GitHub でリモートリポジトリを作成する: 
tech-blog (Public)

cd /Users/kk/Home/_work/blog/tech-blog

# check
ssh -T git@github.com-14katsumix

# リポジトリをローカルに接続する
git remote add origin git@github.com-14katsumix:14katsumix/tech-blog.git
git remote set-url origin git@github.com-14katsumix:14katsumix/tech-blog.git
git remote -v

# push
git config --local user.name "14katsumix"
git config --local user.email "14katsumix@gmail.com"
git config --local url."github.com-14katsumix:".insteadOf "git@github.com:"

git add -A
git commit -m "Initial commit"
git branch -M main
git push -u origin main

# デプロイ用設定
# GitHub Actions を利用する場合
# Hugo 用の GitHub Actions ワークフローを設定する
cd /Users/kk/Home/_work/blog/tech-blog
mkdir -p .github/workflows
# touch .github/workflows/gh-pages.yml
touch .github/workflows/hugo.yaml

下記ページの hugo.yaml をコピペする: 
https://gohugo.io/hosting-and-deployment/hosting-on-github/

# hugo version に合わせる
HUGO_VERSION: 0.140.1

# テーマをサブモジュールで管理している場合に追記: 
- name: Install submodules
  run: git submodule update --init --recursive

git add -A
git commit -m "Create .github/workflows/hugo.yaml"
git push -u origin main

From GitHub’s main menu, choose Actions.
https://github.com/14katsumix/tech-blog/actions

When GitHub has finished building and deploying your site, the color of the status indicator will change to green.

エラー発生時のログ: commit -> 左メニュー[Usage]

数分待つと以下にブログが公開される: 
https://14katsumix.github.io/tech-blog/
(config.yml の baseURL)

#-------------------------------------------------------------------------------
* robots.txt

公開時は static/robots.txt を削除すること！

* Archetypes
https://gohugo.io/content-management/archetypes/
To create an article using the articles archetype: 
hugo new content articles/something.md
チュートリアル アーキタイプを使用して記事を作成するには:
hugo new content --kind tutorials articles/something.md

* environment 
(string) Build environment. Default is 
- production when running hugo
- development when running hugo server.

my-project/
└── config/
    ├── _default/
    │   ├── hugo.toml
    │   ├── menus.en.toml
    │   ├── menus.de.toml
    │   └── params.toml
    ├── production/
    │   ├── hugo.toml
    │   └── params.toml
    └── staging/
        ├── hugo.toml
        └── params.toml

ex) 
params に merge: deep の設定が適用されると、keywords の値は深くマージされます。

_default/params.yaml
keywords: ["aaa", "bbb"]

production/params.yaml 
keywords: ["ccc"]

をマージすると、以下のような結果になります：
keywords:
  - "aaa"
  - "bbb"
  - "ccc"

ただし、foo: "123" のような単純な値の場合、_merge: deep を使っても、ファイルの優先度に基づき、
production/params.yaml が _default/params.yaml を上書きします。

shallow マージでは、設定ファイルが最後に読み込まれたものが優先されます。
keywords: ["ccc"]
のみが適用される。

_merge: none はマージを行わない設定。
同じキーが複数のファイルに存在する場合、最初のファイルに記載された値がそのまま適用されます。
keywords: ["aaa", "bbb"]
のみが適用される。

* partial template
https://gohugo.io/templates/embedded/
ショートコードはテンプレートファイルでは動作しないことに注意してください。ショートコードが提供するようなドロップイン機能が必要な場合、代わりに部分テンプレートが必要です。

Hugo には、静的および動的 Web サイトの両方で人気のコメント システムであるDisqusの埋め込みテンプレートが含まれています。Disqus を効果的に使用するには、無料サービスにサインアップして Disqus の「短縮名」を取得してください。

* Cascade
https://gohugo.io/content-management/front-matter/#cascade
どのノードもその子孫にフロントマターの値のセットを渡すことができる。

* Related content (See also)

* Comments

* Single template, Template selection
https://gohugo.io/content-management/sections/
Hugo has a defined lookup order to determine which template to use when rendering a page. 
content/products/product-1/benefits -> 
  - layouts/products/list.html
  - layouts/products/single.html
If you need to use a different template for a subsection, specify type and/or layout in front matter.

* Build options
https://gohugo.io/content-management/build-options/
headless page など。

* Image processing
https://gohugo.io/content-management/image-processing/
Global resource 
A global resource is a file within the assets directory, or within any directory mounted to the assets directory.

assets/
└── images/
    └── sunset.jpg    <-- global resource

* comments 機能

* ref, relref
To link to another language version of a document, use this syntax:
{{< relref path="document.md" lang="ja" >}}

* Shortcodes
{{< href-target-blank url="" text="">}}
{{% comment %}} TODO: rewrite the paragraph below. {{% /comment %}}

#-------------------------------------------------------------------------------
前回の記事は [こちら]({{< ref "previous-article.md" >}})
前回の記事は [こちら]({{< relref "../path/to/previous-article.md" >}})

ref: コンテンツディレクトリ（通常content/）のルートからの相対パスを指定。
relref: 現在のページからの相対パスを指定。

#-------------------------------------------------------------------------------
section: ディレクトリ単位での分類。
taxonomy: コンテンツ全体に適用できる分類方法(tagsなど).
term: タクソノミーの具体的な分類値。

#-------------------------------------------------------------------------------

https://14katsumix.github.io/tech-blog/ds-100knocks-dp/100knocks-dp-guidebook/

をツイートして Twitter Card を確認する！

content
└── test
| |--xxx
| | |--_index.md
| | |--yyy
| | | |--_index.md
| | | |--yyy1.md
| | | |--yyy2.md

という構成です。

テーマはPaperModを利用してます。

<a href="{{ .Site.Home.RelPermalink }}">
Return to the home page
</a>


Hugo + GitHub Actions で作成した公開サイトを作成しました。
テーマはPaperModを利用してます。
サイトのリンク構成は全てうまくデプロイされてます。
メニューは全てブラウザで開ます。
macbookでは問題はありません。
しかし、iPhone で Home や メニューを何度かクリックすると、
メニューの tags, categories, Archives などが読み込めなくなる現象が発生してます。
原因は？

iPhoneだと、メニューが開けるときもありますが、
クリック後、いつまで経ってもページが開かない、という現象が起きます。
Chromeのシークレットウィンドウで開いたらきちんと動作した。


[params]
cacheBusting = true
disableLazyLoading = true

