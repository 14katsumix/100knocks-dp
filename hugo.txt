#-------------------------------------------------------------------------------
# To install the exended edition of Hugo:
brew install hugo
hugo version

# Create a new  site
cd /Users/kk/Home/_work/blog
hugo new site tech-blog --format yaml

# theme: Stack

cd /Users/kk/Home/_work/blog/tech-blog  # ブログのルートディレクトリへ移動
# サブモジュールとして追加
# git submodule add --depth=1 https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack  
git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 

git submodule update --init --recursive  # サブモジュールの初期化と取得
git submodule update --remote --merge  # サブモジュールをリモートの最新バージョンに更新

# リポジトリにサブモジュールを追加し、GitHub Actions の中でサブモジュールを初期化するように設定します。
git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack
git submodule update --init --recursive
git add .gitmodules themes/hugo-theme-stack
git commit -m "Add hugo-theme-stack as a submodule"
git push origin main

# Installing/Updating PaperMod
cd /Users/kk/Home/_work/blog/tech-blog
git init
git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
git submodule update --init --recursive
# needed when you reclone your repo (submodules may not get cloned automatically)
git submodule update --remote --merge

# hugo.yaml の編集: 
https://adityatelange.github.io/hugo-PaperMod/posts/papermod/papermod-installation/
の内容を参考に.

# baseURL: "https://14katsumix.github.io/tech-blog/"
baseURL: "https://14jcjc.github.io/tech-blog/"
languageCode: jp
title: katsuのブログ
theme: hugo-theme-stack
# theme: PaperMod

* サンプル記事を作成
hugo new content/100k/r-030.md

* 出力先ディレクトリ（public/）をクリアして再ビルド
hugo --cleanDestinationDir

# public/ディレクトリを一度削除して再ビルド
rm -rf public/
hugo

* Display site configuration

hugo config

* 将来の公開日が設定されているコンテンツをリストアップ

hugo list future

* ローカル環境でサイトを確認

hugo server
# to include draft content
hugo server -D
# 最後に修正したページにブラウザから自動的にリダイレクトさせたい場合
hugo server --navigateToChanged
# キャッシュをクリア
hugo server --ignoreCache
# Fast Render（高速レンダリング）を無効化する場合
hugo server --disableFastRender

hugo server --ignoreCache --disableFastRender --cleanDestinationDir --navigateToChanged -D

hugo server --ignoreCache --disableFastRender --cleanDestinationDir --navigateToChanged --environment production -D

# 以下にアクセスしてサイトを確認する
http://localhost:1313/tech-blog/

# 別ポートを使用する場合
hugo server --port 1314

tech-blog/.gitignore を作成する。以下からダウンロード:
https://github.com/adityatelange/hugo-PaperMod/blob/exampleSite/.gitignore

* GitHub でリモートリポジトリを作成する: 
tech-blog (Public)

* GitHub Pages の設定
「Settings」→「Pages」で、Build and deployment「Source」を
"Github Actions" に変更する。

cd /Users/kk/Home/_work/blog/tech-blog

# check
# ssh -T git@github.com-14katsumix
ssh -T git@github.com-14jcjc

# リポジトリをローカルに接続する

# git remote add origin git@github.com-14katsumix:14katsumix/tech-blog.git
# git remote set-url origin git@github.com-14katsumix:14katsumix/tech-blog.git
# git remote -v

# git remote add origin git@github.com-14jcjc:14jcjc/tech-blog.git
git remote set-url origin git@github.com-14jcjc:14jcjc/tech-blog.git
# git remote set-url origin git@github.com-14jcjc:14jcjc/tech-blog-2.git
git remote -v

# push

# git config --local user.name "14katsumix"
# git config --local user.email "14katsumix@gmail.com"
# git config --local url."github.com-14katsumix:".insteadOf "git@github.com:"

git config --local user.name "14jcjc"
git config --local user.email "14jcjc@gmail.com"
git config --local url."github.com-14jcjc:".insteadOf "git@github.com:"

# git add -A
# git commit -m "Initial commit"
git branch -M main
git push -u origin main

# デプロイ用設定
# GitHub Actions を利用する場合
# Hugo 用の GitHub Actions ワークフローを設定する
cd /Users/kk/Home/_work/blog/tech-blog
mkdir -p .github/workflows
# touch .github/workflows/gh-pages.yml
touch .github/workflows/hugo.yaml

下記ページの hugo.yaml をコピペする: 
https://gohugo.io/hosting-and-deployment/hosting-on-github/

# hugo version に合わせる
HUGO_VERSION: 0.140.1

# テーマをサブモジュールで管理している場合に追記: 
- name: Install submodules
  run: git submodule update --init --recursive

git add -A
git commit -m "Create .github/workflows/hugo.yaml"
git push -u origin main

From GitHub’s main menu, choose Actions.
https://github.com/14katsumix/tech-blog/actions

When GitHub has finished building and deploying your site, the color of the status indicator will change to green.

エラー発生時のログ: commit -> 左メニュー[Usage]

数分待つと以下にブログが公開される: 
https://14jcjc.github.io/tech-blog/
(config.yml の baseURL)

#-------------------------------------------------------------------------------
* git init

ssh -T git@github.com-14jcjc
cd /Users/kk/Home/_work/blog/tech-blog
git clone git@github.com-14jcjc:14jcjc/tech-blog.git .
# git init
# git remote add origin git@github.com-14jcjc:14jcjc/tech-blog.git
# git remote -v
# git pull origin main

git remote set-url origin git@github.com-14jcjc:14jcjc/tech-blog.git
git remote -v

git config --local user.name "14jcjc"
git config --local user.email "14jcjc@gmail.com"
git config --local url."github.com-14jcjc:".insteadOf "git@github.com:"

-------------------------------------------------------------------------------
* grep

rg -i "@media" ./themes/hugo-theme-stack/assets/scss -uu
rg -i "関連するコンテンツ" ./themes/hugo-theme-stack -uu
rg -i ".Draft" ./themes/hugo-theme-stack/ -uu
rg -i "関連するコンテンツ" ./layouts -uu
rg -i "share_icons" ./layouts -uu

rg -i "-accent-color" ./themes/hugo-theme-stack/assets/scss -uu
rg -i "related-content" ./themes/hugo-theme-stack/assets/scss -uu

rg -i "ul" ../tech-blog-2/themes/PaperMod/assets/css -uu
rg -i "share-buttons" ../tech-blog-2/themes/PaperMod/assets/css -uu

#-------------------------------------------------------------------------------

* ToDo



About
- このサイトについて
  技術ネタ、勉強ネタ、近況などを記事にしております。
- GitHub, Twitterへのリンク (https://notes.nakurei.com/about/)
  About
  個人的に運営しているブログです。
  IT技術に関する記事を掲載しています。
  問い合わせ
  当ブログに対するお問い合わせは、以下の方法が提供されます。
  X(Twitter): @team_eririn へのメンション
  Mail: ruy@ainoniwa.net

- privacy を robots.txt などから除外する

- categories: "100本ノック＋α (⭐️5)" などの編集, 画像も(Quantico)
  /content/categories/*

- Twitter cards のチェック.

- スマホでのフォントサイズ, リスト, ヘッダーアンカー, H2下線, etc

- permalinks:
- menus:
- /config/

- 本番環境で, sitemap.xml にdraftのページなどが含まれないようにする
- robots.txt
- コードブロックについて調べる: 
  + ダークモードのハイライトカラーが悪い
  + chroma を使用してるか？
  + ファイル名を表示する: https://bit.ly/4aAqYan
  + 行のハイライトが右端までいかない. スクロールで途切れる.
- コードブロックの .chroma .hl の背景色が width: 100% にしても横幅いっぱいにならない
- env:
- ダークモードの設定
- ナビゲーション: prev, next
- 演習問題一覧のスタイル
- <pre> のカラー
- <hr>のスタイルを変更する
- ヘッダーのアンカーのロゴを変更する, 右に出す
- ヘッダーのスタイル、lineheight、h2に下線
- フォントの設定: https://bit.ly/42vb3s5
- リストのインデント幅を狭くする (ol, li, ul)
- 目次のインデント幅を狭くする (.widget--toc)
- ショートコードで表示したリンクのスタイルが異なる
  -> href-target-blank.html を改修.
- code, .chroma のフォントサイズ
- コードブロックのスタイルをカスタマイズ: (ファイル名を付ける)
- コードブロックの半角のフォントが読みずらい（特にスマホで）
- Alerts
- menu の iconイメージ (演習問題など): https://tabler.io/icons
- product-link に 引数: class ("link") を追加する。
- favicon
- アバター画像と、その横に絵文字
- 最終更新 2025-01-24 06:53 JST の確認
- Share ボタン
- tag が Titleケースになってしまう
  -> capitalizeListTitles: false を設定
- [Privacy Policy]({{< ref "privacy" >}})
- ドラフトページにアイコンを出す

* href-target-blank の名称を変更

* widgets のタグ数の limit などを設定

* Stack でページの表示が重くなったら検索機能を差し替える
1000記事以上あっても、Algoliaなら瞬時に検索可能。
Hugo の Lunr.js は 100記事を超えると遅くなる傾向があるので、記事数が多いならAlgoliaの方が圧倒的に有利。
PaperModでも同様に使えるので、検索機能を追加したいならAlgoliaが最適解です。

* リンクの前に FontAwesomeのアイコンを表示する
https://chatgpt.com/c/678ef794-3970-8005-8183-b5f17ca3a0ce

* Abountメニューを作る。

* データサイエンス100本ノック＋α の環境構築

データサイエンス100本ノック（構造化データ加工編）を導入済みのユーザー向けについて。

* カスタムドメイン, https, 14katsumix.com

* Google Analytics

G-GLB0HGKER4

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-GLB0HGKER4"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-GLB0HGKER4');
</script>

* Google Search Console

以下の TXT レコードを 14jcjc.github.io の DNS 設定にコピーします: 

* 各 platforms のアフィリエイトリンクを出力する shortcodes を作る
  参考: product-link.html

* コンテンツファイルに記述する問題文を data/k100/questions.yaml からゲットする.

* 演習問題一覧ページを「番号順」にする。「難易度順」を作る. 

* 各演習問題のページを作る. 

* robots.txt

公開時は static/robots.txt を削除すること！

* リスト表示とシングル表示の上部にタグを付ける: https://bit.ly/40h5xGs

* 画像を追加した際の注意点

question.svg と review.svg に @ マークが付いています。
これは macOS の「拡張属性 (Extended Attributes)」を示しています。拡張属性が Hugo のビルドを妨げている可能性があるので、削除してみてください。

ls -l assets/icons/

-rw-r--r--   1 kk  staff  418  1 21 21:11 link.svg
-rw-r--r--   1 kk  staff  431  1 21 21:11 messages.svg
-rw-r--r--@  1 kk  staff  537  1 23 05:40 question.svg
-rw-r--r--@  1 kk  staff  454  1 23 05:42 review.svg

xattr -c assets/icons/question.svg assets/icons/review.svg

* {{< shortcode >}} と {{% shortcode %}} の違い
https://gohugo.io/methods/page/rendershortcodes/
PAGE.RenderShortcodes は、コンテンツファイル内のショートコードをレンダリングするが、
Markdown は保持されることに注意。

* partial template
https://gohugo.io/templates/embedded/
ショートコードはテンプレートファイルでは動作しないことに注意してください。ショートコードが提供するようなドロップイン機能が必要な場合、代わりに部分テンプレートが必要です。

* comments 機能
Hugo には、静的および動的 Web サイトの両方で人気のコメント システムであるDisqusの埋め込みテンプレートが含まれています。Disqus を効果的に使用するには、無料サービスにサインアップして Disqus の「短縮名」を取得してください。

埋め込みテンプレートを含めるには:
{{ template "_internal/disqus.html" . }}

* 関連記事の設定 (hugo.yaml, related)

* Cascade
https://gohugo.io/content-management/front-matter/#cascade
どのノードもその子孫にフロントマターの値のセットを渡すことができる。

* Related content (See also)

* Single template, Template selection
https://gohugo.io/content-management/sections/
Hugo has a defined lookup order to determine which template to use when rendering a page. 
content/products/product-1/benefits -> 
  - layouts/products/list.html
  - layouts/products/single.html
If you need to use a different template for a subsection, specify type and/or layout in front matter.

* Build options
https://gohugo.io/content-management/build-options/
headless page など。

* Image processing
https://gohugo.io/content-management/image-processing/
Global resource 
A global resource is a file within the assets directory, or within any directory mounted to the assets directory.

assets/
└── images/
    └── sunset.jpg    <-- global resource

* ref, relref
To link to another language version of a document, use this syntax:
{{< relref path="document.md" lang="ja" >}}

* Shortcodes
{{< href-target-blank url="" text="">}}
{{% comment %}} TODO: rewrite the paragraph below. {{% /comment %}}

-------------------------------------------------------------------------------
section: ディレクトリ単位での分類。
taxonomy: コンテンツ全体に適用できる分類方法(tagsなど).
term: タクソノミーの具体的な分類値。

-------------------------------------------------------------------------------
* Archetypes
https://gohugo.io/content-management/archetypes/
To create an article using the articles archetype: 
hugo new content articles/something.md
チュートリアル アーキタイプを使用して記事を作成するには:
hugo new content --kind tutorials articles/something.md

hugo new test/r-028

-------------------------------------------------------------------------------
* ローカルストレージの確認 (ブラウザ)
ローカルストレージに保存されたデータを確認するには、以下の手順で行います。
- 開発者ツールを開く (F12, 右クリックして「検証」を選択)
- 「Application」タブを選択.
- 「Local Storage」を確認
左のサイドバーに「Local Storage」があります。その中から、現在のサイトのドメインを選択します。
右側に保存されているキーと値が表示されます。
例えば、order や edition の項目がある場合、それらの値が表示される。
- 各項目を削除して動作確認することもできる。

-------------------------------------------------------------------------------
* environment 
(string) Build environment. Default is 
- production when running hugo
- development when running hugo server.

my-project/
└── config/
    ├── _default/
    │   ├── hugo.toml
    │   ├── menus.en.toml
    │   ├── menus.de.toml
    │   └── params.toml
    ├── production/
    │   ├── hugo.toml
    │   └── params.toml
    └── staging/
        ├── hugo.toml
        └── params.toml

https://gohugo.io/getting-started/configuration/

ex) 
params に merge: deep の設定が適用されると、keywords の値は深くマージされます。

_default/params.yaml
keywords: ["aaa", "bbb"]

production/params.yaml 
keywords: ["ccc"]

をマージすると、以下のような結果になります：
keywords:
  - "aaa"
  - "bbb"
  - "ccc"

ただし、foo: "123" のような単純な値の場合、_merge: deep を使っても、ファイルの優先度に基づき、
production/params.yaml が _default/params.yaml を上書きします。

shallow マージでは、設定ファイルが最後に読み込まれたものが優先されます。
keywords: ["ccc"]
のみが適用される。

_merge: none はマージを行わない設定。
同じキーが複数のファイルに存在する場合、最初のファイルに記載された値がそのまま適用されます。
keywords: ["aaa", "bbb"]
のみが適用される。

-------------------------------------------------------------------------------
* Twitter Card を確認する！

https://14katsumix.github.io/tech-blog/ds-100knocks-dp/100knocks-dp-guidebook/
をツイートして Twitter Card を確認する！

content
└── test
| |--xxx
| | |--_index.md
| | |--yyy
| | | |--_index.md
| | | |--yyy1.md
| | | |--yyy2.md

という構成です。

-------------------------------------------------------------------------------
* 定型文のテンプレートをコンテンツに挿入する仕組みを作る.
  -> shortcodes: include を使う。
  参考 (定型文.md はビルド・公開しない): 
  * Build options
  https://gohugo.io/content-management/build-options/
  ---
  cascade:
  - _target:
      environment: production
    build:
      list: never
      render: never
  title: Internal
  ---

以下を参考に: 
https://gohugo.io/methods/page/rendershortcodes/

content/about.md
{{% include "/snippets/services" %}}
{{% include "/snippets/values" %}}
{{% include "/snippets/leadership" %}}

- ショートコードを含む Markdown ファイルを作成: 
content/base.md:
```
## 定型文
このテキストは定型文です。
{{< example_shortcode param="外部データ" >}}
```

- 部分テンプレートで readFile と renderString を使う: 
readFile で外部ファイルを読み込み、RenderString を使ってショートコードをレンダリングします。
layouts/partials/base.html: 
```
{{ $content := readFile "content/base.md" }}
{{ $rendered := $content | .Page.RenderString }}
{{ $rendered | safeHTML }}
```

param引数を受け取る場合は分岐処理で "content/base.md" を動的に定義できる。

- ショートコードを作成して部分テンプレートを呼び出す
layouts/shortcodes/base.html を作成し、その中で layouts/partials/base.html を呼び出します。
layouts/shortcodes/base.html: 
```
{{ partial "base.html" . }}
```
param引数を与えたい場合: 
```
{{ partial "base.html" (dict "context" . "param" (.Get "param")) }}
```
param という引数をショートコードから受け取ります。
context は現在のページ（.Page）や渡されたスコープです。

- コンテンツ内でショートコードを呼び出す

content/posts/my-post.md: 
```
## 記事タイトル

本文の前に定型文を挿入します。

{{< base >}}
or
{{< base param="..." >}}

ここに記事の続きを記述します。
```

この方法により、layouts/partials/base.html の内容が記事内に挿入されます。

-------------------------------------------------------------------------------
* iPhone でのメニューの問題

Hugo + GitHub Actions で作成した公開サイトを作成しました。
テーマはPaperModを利用してます。
サイトのリンク構成は全てうまくデプロイされてます。
メニューは全てブラウザで開ます。
macbookでは問題はありません。
しかし、iPhone で Home や メニューを何度かクリックすると、
メニューの tags, categories, Archives などが読み込めなくなる現象が発生してます。
原因は？

iPhone だと、メニューが開けるときもありますが、
クリック後、いつまで経ってもページが開かない、という現象が起きます。
Chromeのシークレットウィンドウで開いたらきちんと動作した。

-------------------------------------------------------------------------------
* twitter で投稿をシェアしても、タイトルしか表示されない

[params]
cacheBusting = true
disableLazyLoading = true

タイトル: 「ブログ記事タイトル」
説明文: 「記事の説明」
画像: 記事のサムネイル
アカウント: @YourTwitterHandle（あなたのアカウント）

の全てがサイトのmetaデータに含まれてるのに、
ツイッターで投稿をシェアしても、タイトルしか表示されない。

<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@YourTwitterHandle">
<meta name="twitter:title" content="ブログ記事タイトル">
<meta name="twitter:description" content="記事の説明">
<meta name="twitter:image" content="記事のサムネイルURL">
は全て記述されてます。

-------------------------------------------------------------------------------
イントロダクション（全体の導入として）
概要・準備（シンプルに要点を表す）
セットアップガイド（環境設定を強調）
基礎知識（Tips も含めた基礎的な情報を伝えるイメージ）

はじめに
概要・準備
導入
環境構築
ガイドライン
セットアップ
準備とポイント
基礎知識
スタートガイド

-------------------------------------------------------------------------------

「データサイエンス100本ノック～構造化データ加工編ガイドブック」のレビューをブログに書きたい。
以下の条件でサンプルを書いてください。
- フォーマット: Markdown
- 「長年RとSQLを活用してる自分でも成長できた」旨を含める。
- このブログで演習問題の解説とサンプルコードを執筆するので、その記事にスムーズに繋がるような内容とする。



R によるデータベースクエリ操作について、以下の条件で、ブログ記事を書いてください。

- 実際に動かせるサンプルコードを付ける。(DuckDBを使用。): 
dbConnect(), tbl(), show_query() などを用いる。
duckdb_register(), dbSendQuery(), dbFetch() は用いない。

- dplyr と dbplyr について言及する。
- データベースバックエンドについて言及する。
- 遅延評価について言及する。
- データフレームライクに操作でき旨を言及する。
- 実際にSQLクエリが実行されるタイミングについて言及する。

-------------------------------------------------------------------------------


<article class="main-article share-buttons">
  xxxxxxxxxxxxxxxxxxxxxxx
</article>

<article class="main-article share-buttons">
    yyyyyyyyyyyyyyyyyyyyyyyy
</article>


